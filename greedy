from queue import PriorityQueue

def greedy_best_first_search(graph, start, goal, heuristic):
    open_list = PriorityQueue()
    open_list.put((heuristic[start], start))
    
    visited = set()

    while not open_list.empty():
        # Get the node with the lowest heuristic value
        current_cost, current_node = open_list.get()

        if current_node == goal:
            print(f"Reached goal: {goal}")
            return True
        
        visited.add(current_node)

        for neighbor in graph[current_node]:
            if neighbor not in visited:
                open_list.put((heuristic[neighbor], neighbor))
                print(f"Visiting node: {neighbor} with heuristic: {heuristic[neighbor]}")

    print("Goal not reachable")
    return False

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': [],
    'E': ['H'],
    'F': [],
    'G': [],
    'H': []
}

heuristic = {
    'A': 5,
    'B': 3,
    'C': 4,
    'D': 6,
    'E': 2,
    'F': 6,
    'G': 1,
    'H': 0  # Goal node
}

greedy_best_first_search(graph, 'A', 'H', heuristic)
